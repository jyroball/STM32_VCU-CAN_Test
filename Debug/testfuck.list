
testfuck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e9c  08004e9c  0000614c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ea4  08004ea4  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea4  08004ea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ea8  08004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004eac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004eb8  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004f58  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000744  2000014c  08004ff8  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000890  08004ff8  00006890  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000165b2  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b7d  00000000  00000000  0001c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001150  00000000  00000000  0001f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d70  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002739b  00000000  00000000  00021170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001682e  00000000  00000000  0004850b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1a88  00000000  00000000  0005ed39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001507c1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000049a0  00000000  00000000  00150804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001551a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004e58 	.word	0x08004e58

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08004e58 	.word	0x08004e58

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fdec 	bl	8001126 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f853 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fa17 	bl	8000984 <MX_GPIO_Init>
  MX_ETH_Init();
 8000556:	f000 f929 	bl	80007ac <MX_ETH_Init>
  MX_I2C1_Init();
 800055a:	f000 f975 	bl	8000848 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800055e:	f000 f9b3 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000562:	f000 f9e1 	bl	8000928 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000566:	f000 f8b5 	bl	80006d4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800056a:	f000 f8e9 	bl	8000740 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800056e:	481c      	ldr	r0, [pc, #112]	@ (80005e0 <main+0x9c>)
 8000570:	f000 ff55 	bl	800141e <HAL_CAN_Start>

  TxHeader.IDE = CAN_ID_STD;
 8000574:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <main+0xa0>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <main+0xa0>)
 800057c:	f240 4246 	movw	r2, #1094	@ 0x446
 8000580:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000582:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <main+0xa0>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000588:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <main+0xa0>)
 800058a:	2202      	movs	r2, #2
 800058c:	611a      	str	r2, [r3, #16]

  TxData[0] = 50;
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <main+0xa4>)
 8000590:	2232      	movs	r2, #50	@ 0x32
 8000592:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <main+0xa4>)
 8000596:	22aa      	movs	r2, #170	@ 0xaa
 8000598:	705a      	strb	r2, [r3, #1]

  //HAL_CAN_Add

  char msg[] = "Hello from STM32!\r\n";
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <main+0xa8>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	682b      	ldr	r3, [r5, #0]
 80005a6:	6023      	str	r3, [r4, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe2c 	bl	8000208 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <main+0xac>)
 80005bc:	f003 fc78 	bl	8003eb0 <HAL_UART_Transmit>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <main+0xb0>)
 80005c2:	4a09      	ldr	r2, [pc, #36]	@ (80005e8 <main+0xa4>)
 80005c4:	4907      	ldr	r1, [pc, #28]	@ (80005e4 <main+0xa0>)
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <main+0x9c>)
 80005c8:	f000 ff6d 	bl	80014a6 <HAL_CAN_AddTxMessage>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <main+0x92>
	  {
	     Error_Handler ();
 80005d2:	f000 fa79 	bl	8000ac8 <Error_Handler>
	  }

	  HAL_Delay(1000);  // wait 1 second
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f000 fe01 	bl	80011e0 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005de:	e7e3      	b.n	80005a8 <main+0x64>
 80005e0:	200001a0 	.word	0x200001a0
 80005e4:	2000085c 	.word	0x2000085c
 80005e8:	20000874 	.word	0x20000874
 80005ec:	08004e70 	.word	0x08004e70
 80005f0:	200002f4 	.word	0x200002f4
 80005f4:	2000087c 	.word	0x2000087c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fbf9 	bl	8004dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f002 fae0 	bl	8002be0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a29      	ldr	r2, [pc, #164]	@ (80006cc <SystemClock_Config+0xd4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a24      	ldr	r2, [pc, #144]	@ (80006d0 <SystemClock_Config+0xd8>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000668:	23d8      	movs	r3, #216	@ 0xd8
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000670:	2309      	movs	r3, #9
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fb11 	bl	8002ca0 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000684:	f000 fa20 	bl	8000ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000688:	f002 faba 	bl	8002c00 <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000692:	f000 fa19 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2107      	movs	r1, #7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fd97 	bl	80031e8 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006c0:	f000 fa02 	bl	8000ac8 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	@ 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_CAN1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006e0:	2206      	movs	r2, #6
 80006e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_CAN1_Init+0x64>)
 80006fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_CAN1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_CAN1_Init+0x64>)
 8000708:	2201      	movs	r2, #1
 800070a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_CAN1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_CAN1_Init+0x64>)
 8000714:	2201      	movs	r2, #1
 8000716:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_CAN1_Init+0x64>)
 8000726:	f000 fd7f 	bl	8001228 <HAL_CAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f9ca 	bl	8000ac8 <Error_Handler>



  /* USER CODE END CAN1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001a0 	.word	0x200001a0
 800073c:	40006400 	.word	0x40006400

08000740 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <MX_CAN2_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_CAN2_Init+0x64>)
 800074c:	2203      	movs	r2, #3
 800074e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_CAN2_Init+0x64>)
 800075e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000762:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000766:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800076a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800076c:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_CAN2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000774:	2201      	movs	r2, #1
 8000776:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_CAN2_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_CAN2_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_CAN2_Init+0x64>)
 8000792:	f000 fd49 	bl	8001228 <HAL_CAN_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f994 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001c8 	.word	0x200001c8
 80007a8:	40006800 	.word	0x40006800

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_ETH_Init+0x84>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <MX_ETH_Init+0x88>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007c4:	22e1      	movs	r2, #225	@ 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_ETH_Init+0x84>)
 80007dc:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_ETH_Init+0x84>)
 80007e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_ETH_Init+0x84>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <MX_ETH_Init+0x90>)
 80007ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <MX_ETH_Init+0x84>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_ETH_Init+0x94>)
 80007f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_ETH_Init+0x84>)
 80007f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_ETH_Init+0x84>)
 80007fe:	f001 fa6d 	bl	8001cdc <HAL_ETH_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f95e 	bl	8000ac8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080c:	2238      	movs	r2, #56	@ 0x38
 800080e:	2100      	movs	r1, #0
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_ETH_Init+0x98>)
 8000812:	f004 faf4 	bl	8004dfe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_ETH_Init+0x98>)
 8000818:	2221      	movs	r2, #33	@ 0x21
 800081a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_ETH_Init+0x98>)
 800081e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000822:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_ETH_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200001f0 	.word	0x200001f0
 8000834:	40028000 	.word	0x40028000
 8000838:	20000880 	.word	0x20000880
 800083c:	200000ac 	.word	0x200000ac
 8000840:	2000000c 	.word	0x2000000c
 8000844:	20000168 	.word	0x20000168

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 ff3e 	bl	8002704 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 f91b 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f001 ffd1 	bl	800283c <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f912 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f002 f813 	bl	80028d2 <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f909 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200002a0 	.word	0x200002a0
 80008c0:	40005400 	.word	0x40005400
 80008c4:	20404768 	.word	0x20404768

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f003 fa82 	bl	8003e14 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f8d7 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200002f4 	.word	0x200002f4
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2206      	movs	r2, #6
 8000938:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2202      	movs	r2, #2
 800094a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2201      	movs	r2, #1
 8000950:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2201      	movs	r2, #1
 8000962:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	f001 fffd 	bl	800296a <HAL_PCD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f8a7 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000037c 	.word	0x2000037c

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a46      	ldr	r2, [pc, #280]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b44      	ldr	r3, [pc, #272]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a40      	ldr	r2, [pc, #256]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b35      	ldr	r3, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a34      	ldr	r2, [pc, #208]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a28      	ldr	r2, [pc, #160]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a30:	4822      	ldr	r0, [pc, #136]	@ (8000abc <MX_GPIO_Init+0x138>)
 8000a32:	f001 fe4d 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2140      	movs	r1, #64	@ 0x40
 8000a3a:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x13c>)
 8000a3c:	f001 fe48 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	@ (8000ac4 <MX_GPIO_Init+0x140>)
 8000a58:	f001 fc8e 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a5c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <MX_GPIO_Init+0x138>)
 8000a76:	f001 fc7f 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0x13c>)
 8000a92:	f001 fc71 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a96:	2380      	movs	r3, #128	@ 0x80
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_GPIO_Init+0x13c>)
 8000aaa:	f001 fc65 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	@ 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a41      	ldr	r2, [pc, #260]	@ (8000c40 <HAL_CAN_MspInit+0x124>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d139      	bne.n	8000bb2 <HAL_CAN_MspInit+0x96>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a3f      	ldr	r2, [pc, #252]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000b46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b48:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10b      	bne.n	8000b68 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b50:	4b3d      	ldr	r3, [pc, #244]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a3c      	ldr	r2, [pc, #240]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b68:	4b37      	ldr	r3, [pc, #220]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a36      	ldr	r2, [pc, #216]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b74:	4b34      	ldr	r3, [pc, #208]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b90:	2309      	movs	r3, #9
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482c      	ldr	r0, [pc, #176]	@ (8000c4c <HAL_CAN_MspInit+0x130>)
 8000b9c:	f001 fbec 	bl	8002378 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2014      	movs	r0, #20
 8000ba6:	f001 f862 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000baa:	2014      	movs	r0, #20
 8000bac:	f001 f87b 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bb0:	e042      	b.n	8000c38 <HAL_CAN_MspInit+0x11c>
  else if(hcan->Instance==CAN2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <HAL_CAN_MspInit+0x134>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d13d      	bne.n	8000c38 <HAL_CAN_MspInit+0x11c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	4a21      	ldr	r2, [pc, #132]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000bdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_CAN_MspInit+0x128>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d10b      	bne.n	8000bfe <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_CAN_MspInit+0x12c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000c16:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c28:	2309      	movs	r3, #9
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_CAN_MspInit+0x138>)
 8000c34:	f001 fba0 	bl	8002378 <HAL_GPIO_Init>
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	@ 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40006400 	.word	0x40006400
 8000c44:	20000888 	.word	0x20000888
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40006800 	.word	0x40006800
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a4e      	ldr	r2, [pc, #312]	@ (8000db0 <HAL_ETH_MspInit+0x158>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f040 8096 	bne.w	8000da8 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4a4c      	ldr	r2, [pc, #304]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c88:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	4b47      	ldr	r3, [pc, #284]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	4a46      	ldr	r2, [pc, #280]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000c9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca0:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	4b41      	ldr	r3, [pc, #260]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	4a40      	ldr	r2, [pc, #256]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd0:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	4a34      	ldr	r2, [pc, #208]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce8:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d00:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0c:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	4a28      	ldr	r2, [pc, #160]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d18:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d24:	2332      	movs	r3, #50	@ 0x32
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d34:	230b      	movs	r3, #11
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <HAL_ETH_MspInit+0x160>)
 8000d40:	f001 fb1a 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d44:	2386      	movs	r3, #134	@ 0x86
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d54:	230b      	movs	r3, #11
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4817      	ldr	r0, [pc, #92]	@ (8000dbc <HAL_ETH_MspInit+0x164>)
 8000d60:	f001 fb0a 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d76:	230b      	movs	r3, #11
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <HAL_ETH_MspInit+0x168>)
 8000d82:	f001 faf9 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <HAL_ETH_MspInit+0x16c>)
 8000da4:	f001 fae8 	bl	8002378 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000da8:	bf00      	nop
 8000daa:	3738      	adds	r7, #56	@ 0x38
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40028000 	.word	0x40028000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40021800 	.word	0x40021800

08000dc8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0aa      	sub	sp, #168	@ 0xa8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2284      	movs	r2, #132	@ 0x84
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 f808 	bl	8004dfe <memset>
  if(hi2c->Instance==I2C1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <HAL_I2C_MspInit+0xb4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d13c      	bne.n	8000e72 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fc14 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff fe59 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e52:	4619      	mov	r1, r3
 8000e54:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <HAL_I2C_MspInit+0xbc>)
 8000e56:	f001 fa8f 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_I2C_MspInit+0xb8>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e72:	bf00      	nop
 8000e74:	37a8      	adds	r7, #168	@ 0xa8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0aa      	sub	sp, #168	@ 0xa8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2284      	movs	r2, #132	@ 0x84
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ffa8 	bl	8004dfe <memset>
  if(huart->Instance==USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	@ (8000f3c <HAL_UART_MspInit+0xb4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d13c      	bne.n	8000f32 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ebc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fbb4 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed2:	f7ff fdf9 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000f2e:	f001 fa23 	bl	8002378 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f32:	bf00      	nop
 8000f34:	37a8      	adds	r7, #168	@ 0xa8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	2284      	movs	r2, #132	@ 0x84
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 ff48 	bl	8004dfe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f76:	d159      	bne.n	800102c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fb53 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f7ff fd98 	bl	8000ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f001 f9ce 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <HAL_PCD_MspInit+0xf0>)
 8000ff8:	f001 f9be 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001006:	6353      	str	r3, [r2, #52]	@ 0x34
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 800100a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <HAL_PCD_MspInit+0xec>)
 8001022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	37b0      	adds	r7, #176	@ 0xb0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <MemManage_Handler+0x4>

08001054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <UsageFault_Handler+0x4>

08001064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f885 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <CAN1_RX0_IRQHandler+0x10>)
 80010a2:	f000 fad0 	bl	8001646 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001a0 	.word	0x200001a0

080010b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fe85 	bl	8004e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fa1d 	bl	8000544 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001118:	08004eac 	.word	0x08004eac
  ldr r2, =_sbss
 800111c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001120:	20000890 	.word	0x20000890

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>

08001126 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 fd94 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f805 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001136:	f7ff fccd 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fdaf 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 fd77 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000088c 	.word	0x2000088c

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000088c 	.word	0x2000088c

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0ed      	b.n	8001416 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fc68 	bl	8000b1c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff ffb4 	bl	80011c8 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff ffb0 	bl	80011c8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0c5      	b.n	8001416 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0e5      	beq.n	8001264 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0202 	bic.w	r2, r2, #2
 80012a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff ff8e 	bl	80011c8 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ae:	e012      	b.n	80012d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b0:	f7ff ff8a 	bl	80011c8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d90b      	bls.n	80012d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2205      	movs	r2, #5
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e09f      	b.n	8001416 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e5      	bne.n	80012b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7e1b      	ldrb	r3, [r3, #24]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d108      	bne.n	80012fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e007      	b.n	800130e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7e5b      	ldrb	r3, [r3, #25]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e007      	b.n	8001338 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001336:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7e9b      	ldrb	r3, [r3, #26]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0220 	orr.w	r2, r2, #32
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e007      	b.n	8001362 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0220 	bic.w	r2, r2, #32
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7edb      	ldrb	r3, [r3, #27]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0210 	bic.w	r2, r2, #16
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e007      	b.n	800138c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0210 	orr.w	r2, r2, #16
 800138a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7f1b      	ldrb	r3, [r3, #28]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d108      	bne.n	80013a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0208 	orr.w	r2, r2, #8
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e007      	b.n	80013b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0208 	bic.w	r2, r2, #8
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7f5b      	ldrb	r3, [r3, #29]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d108      	bne.n	80013d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0204 	orr.w	r2, r2, #4
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e007      	b.n	80013e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0204 	bic.w	r2, r2, #4
 80013de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	ea42 0103 	orr.w	r1, r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d12e      	bne.n	8001490 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2202      	movs	r2, #2
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800144a:	f7ff febd 	bl	80011c8 <HAL_GetTick>
 800144e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001450:	e012      	b.n	8001478 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001452:	f7ff feb9 	bl	80011c8 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d90b      	bls.n	8001478 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2205      	movs	r2, #5
 8001470:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e012      	b.n	800149e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1e5      	bne.n	8001452 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e006      	b.n	800149e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
  }
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b089      	sub	sp, #36	@ 0x24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <HAL_CAN_AddTxMessage+0x2c>
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f040 80ad 	bne.w	800162c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d105      	bne.n	80014f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8095 	beq.w	800161c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	0e1b      	lsrs	r3, r3, #24
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014fc:	2201      	movs	r2, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	409a      	lsls	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	6809      	ldr	r1, [r1, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3318      	adds	r3, #24
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	440b      	add	r3, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e00f      	b.n	800154a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001534:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800153a:	68f9      	ldr	r1, [r7, #12]
 800153c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800153e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3318      	adds	r3, #24
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	3304      	adds	r3, #4
 800155c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	7d1b      	ldrb	r3, [r3, #20]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d111      	bne.n	800158a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3318      	adds	r3, #24
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3318      	adds	r3, #24
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	440b      	add	r3, r1
 8001586:	3304      	adds	r3, #4
 8001588:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3307      	adds	r3, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	061a      	lsls	r2, r3, #24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3306      	adds	r3, #6
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3305      	adds	r3, #5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4313      	orrs	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	3204      	adds	r2, #4
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	4610      	mov	r0, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	ea43 0200 	orr.w	r2, r3, r0
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3303      	adds	r3, #3
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3302      	adds	r3, #2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	4610      	mov	r0, r2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	ea43 0200 	orr.w	r2, r3, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3318      	adds	r3, #24
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	440b      	add	r3, r1
 8001616:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e00e      	b.n	800163a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e006      	b.n	800163a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b08a      	sub	sp, #40	@ 0x28
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d07c      	beq.n	8001786 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d023      	beq.n	80016de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f983 	bl	80019b4 <HAL_CAN_TxMailbox0CompleteCallback>
 80016ae:	e016      	b.n	80016de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c2:	e00c      	b.n	80016de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	e002      	b.n	80016de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f989 	bl	80019f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d024      	beq.n	8001732 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f963 	bl	80019c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001702:	e016      	b.n	8001732 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
 8001716:	e00c      	b.n	8001732 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
 800172a:	e002      	b.n	8001732 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f969 	bl	8001a04 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d024      	beq.n	8001786 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001744:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f943 	bl	80019dc <HAL_CAN_TxMailbox2CompleteCallback>
 8001756:	e016      	b.n	8001786 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	e00c      	b.n	8001786 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
 800177e:	e002      	b.n	8001786 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f949 	bl	8001a18 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00c      	beq.n	80017aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2210      	movs	r2, #16
 80017a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2208      	movs	r2, #8
 80017c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f93a 	bl	8001a40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f921 	bl	8001a2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2210      	movs	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2208      	movs	r2, #8
 8001828:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f91c 	bl	8001a68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f903 	bl	8001a54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2210      	movs	r2, #16
 8001868:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f906 	bl	8001a7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2208      	movs	r2, #8
 800188a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8ff 	bl	8001a90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d07b      	beq.n	8001994 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d072      	beq.n	800198c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001900:	2b00      	cmp	r3, #0
 8001902:	d043      	beq.n	800198c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03e      	beq.n	800198c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001914:	2b60      	cmp	r3, #96	@ 0x60
 8001916:	d02b      	beq.n	8001970 <HAL_CAN_IRQHandler+0x32a>
 8001918:	2b60      	cmp	r3, #96	@ 0x60
 800191a:	d82e      	bhi.n	800197a <HAL_CAN_IRQHandler+0x334>
 800191c:	2b50      	cmp	r3, #80	@ 0x50
 800191e:	d022      	beq.n	8001966 <HAL_CAN_IRQHandler+0x320>
 8001920:	2b50      	cmp	r3, #80	@ 0x50
 8001922:	d82a      	bhi.n	800197a <HAL_CAN_IRQHandler+0x334>
 8001924:	2b40      	cmp	r3, #64	@ 0x40
 8001926:	d019      	beq.n	800195c <HAL_CAN_IRQHandler+0x316>
 8001928:	2b40      	cmp	r3, #64	@ 0x40
 800192a:	d826      	bhi.n	800197a <HAL_CAN_IRQHandler+0x334>
 800192c:	2b30      	cmp	r3, #48	@ 0x30
 800192e:	d010      	beq.n	8001952 <HAL_CAN_IRQHandler+0x30c>
 8001930:	2b30      	cmp	r3, #48	@ 0x30
 8001932:	d822      	bhi.n	800197a <HAL_CAN_IRQHandler+0x334>
 8001934:	2b10      	cmp	r3, #16
 8001936:	d002      	beq.n	800193e <HAL_CAN_IRQHandler+0x2f8>
 8001938:	2b20      	cmp	r3, #32
 800193a:	d005      	beq.n	8001948 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800193c:	e01d      	b.n	800197a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001946:	e019      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001950:	e014      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f043 0320 	orr.w	r3, r3, #32
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800195a:	e00f      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001964:	e00a      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800196e:	e005      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001978:	e000      	b.n	800197c <HAL_CAN_IRQHandler+0x336>
            break;
 800197a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800198a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2204      	movs	r2, #4
 8001992:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f87c 	bl	8001aa4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	@ 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	05fa0000 	.word	0x05fa0000

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	@ (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff3e 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff31 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e086      	b.n	8001dfc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2223      	movs	r2, #35	@ 0x23
 8001cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7fe ffa9 	bl	8000c58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_ETH_Init+0x128>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e04 <HAL_ETH_Init+0x128>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d12:	4b3c      	ldr	r3, [pc, #240]	@ (8001e04 <HAL_ETH_Init+0x128>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <HAL_ETH_Init+0x12c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a39      	ldr	r2, [pc, #228]	@ (8001e08 <HAL_ETH_Init+0x12c>)
 8001d24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_ETH_Init+0x12c>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4935      	ldr	r1, [pc, #212]	@ (8001e08 <HAL_ETH_Init+0x12c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_ETH_Init+0x12c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff fa38 	bl	80011c8 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d5a:	e011      	b.n	8001d80 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d5c:	f7ff fa34 	bl	80011c8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d6a:	d909      	bls.n	8001d80 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	22e0      	movs	r2, #224	@ 0xe0
 8001d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e03d      	b.n	8001dfc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e4      	bne.n	8001d5c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f97a 	bl	800208c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fa25 	bl	80021e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa7b 	bl	800229a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	461a      	mov	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f9e3 	bl	8002178 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_ETH_Init+0x130>)
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001de6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2210      	movs	r2, #16
 8001df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	00020060 	.word	0x00020060

08001e10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4b53      	ldr	r3, [pc, #332]	@ (8001f74 <ETH_SetMACConfig+0x164>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7b9b      	ldrb	r3, [r3, #14]
 8001e2e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	7c12      	ldrb	r2, [r2, #16]
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d102      	bne.n	8001e3e <ETH_SetMACConfig+0x2e>
 8001e38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e3c:	e000      	b.n	8001e40 <ETH_SetMACConfig+0x30>
 8001e3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	7c52      	ldrb	r2, [r2, #17]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d102      	bne.n	8001e50 <ETH_SetMACConfig+0x40>
 8001e4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e4e:	e000      	b.n	8001e52 <ETH_SetMACConfig+0x42>
 8001e50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7fdb      	ldrb	r3, [r3, #31]
 8001e5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	7f92      	ldrb	r2, [r2, #30]
 8001e6c:	2a00      	cmp	r2, #0
 8001e6e:	d102      	bne.n	8001e76 <ETH_SetMACConfig+0x66>
 8001e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0x68>
 8001e76:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7f1b      	ldrb	r3, [r3, #28]
 8001e7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d102      	bne.n	8001ea0 <ETH_SetMACConfig+0x90>
 8001e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9e:	e000      	b.n	8001ea2 <ETH_SetMACConfig+0x92>
 8001ea0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ea2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	7bdb      	ldrb	r3, [r3, #15]
 8001ea8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eaa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001eb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff f984 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d101      	bne.n	8001f06 <ETH_SetMACConfig+0xf6>
 8001f02:	2280      	movs	r2, #128	@ 0x80
 8001f04:	e000      	b.n	8001f08 <ETH_SetMACConfig+0xf8>
 8001f06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f08:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f16:	2a01      	cmp	r2, #1
 8001f18:	d101      	bne.n	8001f1e <ETH_SetMACConfig+0x10e>
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	e000      	b.n	8001f20 <ETH_SetMACConfig+0x110>
 8001f1e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f28:	2a01      	cmp	r2, #1
 8001f2a:	d101      	bne.n	8001f30 <ETH_SetMACConfig+0x120>
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	e000      	b.n	8001f32 <ETH_SetMACConfig+0x122>
 8001f30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f3a:	2a01      	cmp	r2, #1
 8001f3c:	d101      	bne.n	8001f42 <ETH_SetMACConfig+0x132>
 8001f3e:	2202      	movs	r2, #2
 8001f40:	e000      	b.n	8001f44 <ETH_SetMACConfig+0x134>
 8001f42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff f93f 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	fd20810f 	.word	0xfd20810f

08001f78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <ETH_SetDMAConfig+0x110>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7b1b      	ldrb	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <ETH_SetDMAConfig+0x2c>
 8001f9e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fa2:	e000      	b.n	8001fa6 <ETH_SetDMAConfig+0x2e>
 8001fa4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7b5b      	ldrb	r3, [r3, #13]
 8001faa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	7f52      	ldrb	r2, [r2, #29]
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d102      	bne.n	8001fbc <ETH_SetDMAConfig+0x44>
 8001fb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fba:	e000      	b.n	8001fbe <ETH_SetDMAConfig+0x46>
 8001fbc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fbe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	7b9b      	ldrb	r3, [r3, #14]
 8001fc4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fc6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fcc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	7f1b      	ldrb	r3, [r3, #28]
 8001fd2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fd4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7f9b      	ldrb	r3, [r3, #30]
 8001fda:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fdc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fe2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fec:	4313      	orrs	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff f8e6 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	461a      	mov	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800202c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002032:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002038:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002040:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002042:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002048:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800204a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002050:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800205a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800205e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff f8b7 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	f8de3f23 	.word	0xf8de3f23

0800208c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0a6      	sub	sp, #152	@ 0x98
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020ce:	2300      	movs	r3, #0
 80020d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002106:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fe7f 	bl	8001e10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002112:	2301      	movs	r3, #1
 8002114:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002116:	2301      	movs	r3, #1
 8002118:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002146:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002148:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800214c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800214e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002152:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff05 	bl	8001f78 <ETH_SetDMAConfig>
}
 800216e:	bf00      	nop
 8002170:	3798      	adds	r7, #152	@ 0x98
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3305      	adds	r3, #5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	3204      	adds	r2, #4
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <ETH_MACAddressConfig+0x68>)
 800219a:	4413      	add	r3, r2
 800219c:	461a      	mov	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3303      	adds	r3, #3
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061a      	lsls	r2, r3, #24
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3302      	adds	r3, #2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3301      	adds	r3, #1
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4313      	orrs	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <ETH_MACAddressConfig+0x6c>)
 80021ca:	4413      	add	r3, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40028040 	.word	0x40028040
 80021e4:	40028044 	.word	0x40028044

080021e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e03e      	b.n	8002274 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	3206      	adds	r2, #6
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d80c      	bhi.n	8002258 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e004      	b.n	8002262 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d9bd      	bls.n	80021f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228c:	611a      	str	r2, [r3, #16]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e048      	b.n	800233a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6919      	ldr	r1, [r3, #16]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	3212      	adds	r2, #18
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d80c      	bhi.n	800232a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	e004      	b.n	8002334 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d9b3      	bls.n	80022a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e175      	b.n	8002684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8164 	bne.w	800267e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x56>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80be 	beq.w	800267e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b66      	ldr	r3, [pc, #408]	@ (800269c <HAL_GPIO_Init+0x324>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4a65      	ldr	r2, [pc, #404]	@ (800269c <HAL_GPIO_Init+0x324>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250c:	6453      	str	r3, [r2, #68]	@ 0x44
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <HAL_GPIO_Init+0x324>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800251a:	4a61      	ldr	r2, [pc, #388]	@ (80026a0 <HAL_GPIO_Init+0x328>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a58      	ldr	r2, [pc, #352]	@ (80026a4 <HAL_GPIO_Init+0x32c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d037      	beq.n	80025b6 <HAL_GPIO_Init+0x23e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a57      	ldr	r2, [pc, #348]	@ (80026a8 <HAL_GPIO_Init+0x330>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_GPIO_Init+0x23a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a56      	ldr	r2, [pc, #344]	@ (80026ac <HAL_GPIO_Init+0x334>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x236>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a55      	ldr	r2, [pc, #340]	@ (80026b0 <HAL_GPIO_Init+0x338>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x232>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a54      	ldr	r2, [pc, #336]	@ (80026b4 <HAL_GPIO_Init+0x33c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x22e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a53      	ldr	r2, [pc, #332]	@ (80026b8 <HAL_GPIO_Init+0x340>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x22a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	@ (80026bc <HAL_GPIO_Init+0x344>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x226>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a51      	ldr	r2, [pc, #324]	@ (80026c0 <HAL_GPIO_Init+0x348>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x222>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a50      	ldr	r2, [pc, #320]	@ (80026c4 <HAL_GPIO_Init+0x34c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x21e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	@ (80026c8 <HAL_GPIO_Init+0x350>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x21a>
 800258e:	2309      	movs	r3, #9
 8002590:	e012      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 8002592:	230a      	movs	r3, #10
 8002594:	e010      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 8002596:	2308      	movs	r3, #8
 8002598:	e00e      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 800259a:	2307      	movs	r3, #7
 800259c:	e00c      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 800259e:	2306      	movs	r3, #6
 80025a0:	e00a      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e008      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e004      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025b6:	2300      	movs	r3, #0
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f002 0203 	and.w	r2, r2, #3
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	4093      	lsls	r3, r2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025c8:	4935      	ldr	r1, [pc, #212]	@ (80026a0 <HAL_GPIO_Init+0x328>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d6:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_GPIO_Init+0x354>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fa:	4a34      	ldr	r2, [pc, #208]	@ (80026cc <HAL_GPIO_Init+0x354>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002600:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <HAL_GPIO_Init+0x354>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002624:	4a29      	ldr	r2, [pc, #164]	@ (80026cc <HAL_GPIO_Init+0x354>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_GPIO_Init+0x354>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264e:	4a1f      	ldr	r2, [pc, #124]	@ (80026cc <HAL_GPIO_Init+0x354>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_GPIO_Init+0x354>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <HAL_GPIO_Init+0x354>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	f67f ae86 	bls.w	8002398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3724      	adds	r7, #36	@ 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40013800 	.word	0x40013800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40021400 	.word	0x40021400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40021c00 	.word	0x40021c00
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40022400 	.word	0x40022400
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e08b      	b.n	800282e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fb4c 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	@ 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002754:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002764:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e006      	b.n	800278c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800278a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d108      	bne.n	80027a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	e007      	b.n	80027b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002838 <HAL_I2C_Init+0x134>)
 80027c2:	430b      	orrs	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69d9      	ldr	r1, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	02008000 	.word	0x02008000

0800283c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d138      	bne.n	80028c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800285c:	2302      	movs	r3, #2
 800285e:	e032      	b.n	80028c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	@ 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800288e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d139      	bne.n	800295c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e033      	b.n	800295e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2224      	movs	r2, #36	@ 0x24
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af02      	add	r7, sp, #8
 8002970:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e108      	b.n	8002b8e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fad6 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029aa:	d102      	bne.n	80029b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 ff8c 	bl	80048d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7c1a      	ldrb	r2, [r3, #16]
 80029c4:	f88d 2000 	strb.w	r2, [sp]
 80029c8:	3304      	adds	r3, #4
 80029ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029cc:	f001 ff28 	bl	8004820 <USB_CoreInit>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0d5      	b.n	8002b8e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 ff84 	bl	80048f6 <USB_SetCurrentMode>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0c6      	b.n	8002b8e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e04a      	b.n	8002a9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3315      	adds	r3, #21
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3314      	adds	r3, #20
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	b298      	uxth	r0, r3
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	332e      	adds	r3, #46	@ 0x2e
 8002a42:	4602      	mov	r2, r0
 8002a44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3318      	adds	r3, #24
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	331c      	adds	r3, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3324      	adds	r3, #36	@ 0x24
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	791b      	ldrb	r3, [r3, #4]
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3af      	bcc.n	8002a06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e044      	b.n	8002b36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	3301      	adds	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3b5      	bcc.n	8002aac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7c1a      	ldrb	r2, [r3, #16]
 8002b48:	f88d 2000 	strb.w	r2, [sp]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b50:	f001 ff1e 	bl	8004990 <USB_DevInit>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e013      	b.n	8002b8e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7b1b      	ldrb	r3, [r3, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d102      	bne.n	8002b82 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f80b 	bl	8002b98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 f8d9 	bl	8004d3e <USB_DevDisconnect>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_PCDEx_ActivateLPM+0x44>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	10000003 	.word	0x10000003

08002be0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40007000 	.word	0x40007000

08002c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2e:	f7fe facb 	bl	80011c8 <HAL_GetTick>
 8002c32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c34:	e009      	b.n	8002c4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c36:	f7fe fac7 	bl	80011c8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c44:	d901      	bls.n	8002c4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e022      	b.n	8002c90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4a:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c56:	d1ee      	bne.n	8002c36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7fe fab0 	bl	80011c8 <HAL_GetTick>
 8002c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c6a:	e009      	b.n	8002c80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c6c:	f7fe faac 	bl	80011c8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c7a:	d901      	bls.n	8002c80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e007      	b.n	8002c90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c8c:	d1ee      	bne.n	8002c6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e291      	b.n	80031da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8087 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc4:	4b96      	ldr	r3, [pc, #600]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d00c      	beq.n	8002cea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd0:	4b93      	ldr	r3, [pc, #588]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62>
 8002cdc:	4b90      	ldr	r3, [pc, #576]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x130>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d168      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e26b      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x7a>
 8002d0c:	4b84      	ldr	r3, [pc, #528]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a83      	ldr	r2, [pc, #524]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e02e      	b.n	8002d78 <HAL_RCC_OscConfig+0xd8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x9c>
 8002d22:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7e      	ldr	r2, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7b      	ldr	r2, [pc, #492]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xd8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0xc0>
 8002d46:	4b76      	ldr	r3, [pc, #472]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b73      	ldr	r3, [pc, #460]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a72      	ldr	r2, [pc, #456]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xd8>
 8002d60:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6e      	ldr	r2, [pc, #440]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6b      	ldr	r2, [pc, #428]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa22 	bl	80011c8 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fa1e 	bl	80011c8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e21f      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe8>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa0e 	bl	80011c8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fa0a 	bl	80011c8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e20b      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	4b57      	ldr	r3, [pc, #348]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x110>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d069      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x190>
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1df      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1a:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	493d      	ldr	r1, [pc, #244]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	e040      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d023      	beq.n	8002e80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a38      	ldr	r2, [pc, #224]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f9c0 	bl	80011c8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f9bc 	bl	80011c8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1bd      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4929      	ldr	r1, [pc, #164]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
 8002e7e:	e018      	b.n	8002eb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f99c 	bl	80011c8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe f998 	bl	80011c8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e199      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d038      	beq.n	8002f30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eca:	4a15      	ldr	r2, [pc, #84]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f979 	bl	80011c8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe f975 	bl	80011c8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e176      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x23a>
 8002ef8:	e01a      	b.n	8002f30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f95f 	bl	80011c8 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe f95b 	bl	80011c8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d903      	bls.n	8002f24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e15c      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
 8002f20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	4b91      	ldr	r3, [pc, #580]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ee      	bne.n	8002f0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a4 	beq.w	8003086 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a87      	ldr	r2, [pc, #540]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f56:	4b85      	ldr	r3, [pc, #532]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f66:	4b82      	ldr	r3, [pc, #520]	@ (8003170 <HAL_RCC_OscConfig+0x4d0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f72:	4b7f      	ldr	r3, [pc, #508]	@ (8003170 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7e      	ldr	r2, [pc, #504]	@ (8003170 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe f923 	bl	80011c8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe f91f 	bl	80011c8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	@ 0x64
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e120      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f98:	4b75      	ldr	r3, [pc, #468]	@ (8003170 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x31a>
 8002fac:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb8:	e02d      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x33c>
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a69      	ldr	r2, [pc, #420]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fce:	4b67      	ldr	r3, [pc, #412]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a66      	ldr	r2, [pc, #408]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	e01c      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x35e>
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a60      	ldr	r2, [pc, #384]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x376>
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	4a5a      	ldr	r2, [pc, #360]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	@ 0x70
 800300a:	4b58      	ldr	r3, [pc, #352]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	4a57      	ldr	r2, [pc, #348]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe f8d3 	bl	80011c8 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe f8cf 	bl	80011c8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0ce      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	4b4b      	ldr	r3, [pc, #300]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <HAL_RCC_OscConfig+0x386>
 8003048:	e014      	b.n	8003074 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7fe f8bd 	bl	80011c8 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe f8b9 	bl	80011c8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0b8      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ee      	bne.n	8003052 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4b3c      	ldr	r3, [pc, #240]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	4a3b      	ldr	r2, [pc, #236]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003084:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a4 	beq.w	80031d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	4b36      	ldr	r3, [pc, #216]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d06b      	beq.n	8003174 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d149      	bne.n	8003138 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b31      	ldr	r3, [pc, #196]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a30      	ldr	r2, [pc, #192]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe f88a 	bl	80011c8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe f886 	bl	80011c8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e087      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	019b      	lsls	r3, r3, #6
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	3b01      	subs	r3, #1
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4313      	orrs	r3, r2
 80030fc:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003102:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f85a 	bl	80011c8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe f856 	bl	80011c8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e057      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x478>
 8003136:	e04f      	b.n	80031d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f840 	bl	80011c8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe f83c 	bl	80011c8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03d      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_RCC_OscConfig+0x4cc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x4ac>
 800316a:	e035      	b.n	80031d8 <HAL_RCC_OscConfig+0x538>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_RCC_OscConfig+0x544>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d028      	beq.n	80031d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d121      	bne.n	80031d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d11a      	bne.n	80031d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031a4:	4013      	ands	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d111      	bne.n	80031d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0d0      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b6a      	ldr	r3, [pc, #424]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b67      	ldr	r3, [pc, #412]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4965      	ldr	r1, [pc, #404]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d040      	beq.n	800330c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e073      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4936      	ldr	r1, [pc, #216]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fd ff74 	bl	80011c8 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd ff70 	bl	80011c8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e053      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b27      	ldr	r3, [pc, #156]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b24      	ldr	r3, [pc, #144]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 020f 	bic.w	r2, r3, #15
 8003322:	4922      	ldr	r1, [pc, #136]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <HAL_RCC_ClockConfig+0x1cc>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fed0 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08004e84 	.word	0x08004e84
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b094      	sub	sp, #80	@ 0x50
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80e1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e0db      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b73      	ldr	r3, [pc, #460]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f8:	e0db      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003408:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800340a:	4b6d      	ldr	r3, [pc, #436]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
 800342e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6139      	str	r1, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4651      	mov	r1, sl
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4651      	mov	r1, sl
 8003474:	ebb2 0801 	subs.w	r8, r2, r1
 8003478:	4659      	mov	r1, fp
 800347a:	eb63 0901 	sbc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	462b      	mov	r3, r5
 80034a0:	eb49 0303 	adc.w	r3, r9, r3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b2:	4629      	mov	r1, r5
 80034b4:	024b      	lsls	r3, r1, #9
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034bc:	4621      	mov	r1, r4
 80034be:	024a      	lsls	r2, r1, #9
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d0:	f7fc fea2 	bl	8000218 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	e058      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4641      	mov	r1, r8
 8003512:	ebb2 0a01 	subs.w	sl, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb63 0b01 	sbc.w	fp, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003530:	ebb2 040a 	subs.w	r4, r2, sl
 8003534:	eb63 050b 	sbc.w	r5, r3, fp
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	00eb      	lsls	r3, r5, #3
 8003542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4643      	mov	r3, r8
 800354e:	18e3      	adds	r3, r4, r3
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	464b      	mov	r3, r9
 8003554:	eb45 0303 	adc.w	r3, r5, r3
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	f7fc fe48 	bl	8000218 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3750      	adds	r7, #80	@ 0x50
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	08004e94 	.word	0x08004e94

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffdc 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	08004e94 	.word	0x08004e94

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800365c:	4b69      	ldr	r3, [pc, #420]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a68      	ldr	r2, [pc, #416]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003666:	6093      	str	r3, [r2, #8]
 8003668:	4b66      	ldr	r3, [pc, #408]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	4964      	ldr	r1, [pc, #400]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368e:	4b5d      	ldr	r3, [pc, #372]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003694:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	4959      	ldr	r1, [pc, #356]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	494a      	ldr	r1, [pc, #296]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ea:	2301      	movs	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 808b 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b3a      	ldr	r3, [pc, #232]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	4a39      	ldr	r2, [pc, #228]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	@ 0x40
 8003724:	4b37      	ldr	r3, [pc, #220]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003730:	4b35      	ldr	r3, [pc, #212]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd fd44 	bl	80011c8 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fd fd40 	bl	80011c8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	@ 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e357      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003756:	4b2c      	ldr	r3, [pc, #176]	@ (8003808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003762:	4b28      	ldr	r3, [pc, #160]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d035      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	429a      	cmp	r2, r3
 800377e:	d02e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003788:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378a:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037a2:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037a8:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d114      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd fd08 	bl	80011c8 <HAL_GetTick>
 80037b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd fd04 	bl	80011c8 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e319      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ea:	d111      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037ec:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	4901      	ldr	r1, [pc, #4]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
 8003802:	e00b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	0ffffcff 	.word	0x0ffffcff
 8003810:	4baa      	ldr	r3, [pc, #680]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4aa9      	ldr	r2, [pc, #676]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	4ba7      	ldr	r3, [pc, #668]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	49a4      	ldr	r1, [pc, #656]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	4313      	orrs	r3, r2
 800382c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800383a:	4ba0      	ldr	r3, [pc, #640]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003840:	4a9e      	ldr	r2, [pc, #632]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003846:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800384a:	4b9c      	ldr	r3, [pc, #624]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	4999      	ldr	r1, [pc, #612]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003876:	4991      	ldr	r1, [pc, #580]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388a:	4b8c      	ldr	r3, [pc, #560]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003898:	4988      	ldr	r1, [pc, #544]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ac:	4b83      	ldr	r3, [pc, #524]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ba:	4980      	ldr	r1, [pc, #512]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ce:	4b7b      	ldr	r3, [pc, #492]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4977      	ldr	r1, [pc, #476]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f0:	4b72      	ldr	r3, [pc, #456]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	496f      	ldr	r1, [pc, #444]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003912:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003918:	f023 020c 	bic.w	r2, r3, #12
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	4966      	ldr	r1, [pc, #408]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003934:	4b61      	ldr	r3, [pc, #388]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	495e      	ldr	r1, [pc, #376]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003956:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003964:	4955      	ldr	r1, [pc, #340]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003978:	4b50      	ldr	r3, [pc, #320]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	494d      	ldr	r1, [pc, #308]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800399a:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	4944      	ldr	r1, [pc, #272]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039bc:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	493c      	ldr	r1, [pc, #240]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ec:	4933      	ldr	r1, [pc, #204]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a00:	4b2e      	ldr	r3, [pc, #184]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a0e:	492b      	ldr	r1, [pc, #172]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a22:	4b26      	ldr	r3, [pc, #152]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a30:	4922      	ldr	r1, [pc, #136]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	4912      	ldr	r1, [pc, #72]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a84:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a94:	4909      	ldr	r1, [pc, #36]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d006      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80d9 	beq.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ab0:	4b02      	ldr	r3, [pc, #8]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a01      	ldr	r2, [pc, #4]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fb81 	bl	80011c8 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aca:	f7fd fb7d 	bl	80011c8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	@ 0x64
 8003ad6:	d901      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e194      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003adc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f0      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d021      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11d      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003afc:	4b64      	ldr	r3, [pc, #400]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b0a:	4b61      	ldr	r3, [pc, #388]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b10:	0e1b      	lsrs	r3, r3, #24
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	4957      	ldr	r1, [pc, #348]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02e      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b62:	d129      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b64:	4b4a      	ldr	r3, [pc, #296]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b72:	4b47      	ldr	r3, [pc, #284]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b78:	0f1b      	lsrs	r3, r3, #28
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	019a      	lsls	r2, r3, #6
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	071b      	lsls	r3, r3, #28
 8003b98:	493d      	ldr	r1, [pc, #244]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba6:	f023 021f 	bic.w	r2, r3, #31
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4937      	ldr	r1, [pc, #220]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01d      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc4:	4b32      	ldr	r3, [pc, #200]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bca:	0e1b      	lsrs	r3, r3, #24
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd8:	0f1b      	lsrs	r3, r3, #28
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	019a      	lsls	r2, r3, #6
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	071b      	lsls	r3, r3, #28
 8003bf8:	4925      	ldr	r1, [pc, #148]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	019a      	lsls	r2, r3, #6
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	071b      	lsls	r3, r3, #28
 8003c28:	4919      	ldr	r1, [pc, #100]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c30:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a16      	ldr	r2, [pc, #88]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3c:	f7fd fac4 	bl	80011c8 <HAL_GetTick>
 8003c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c44:	f7fd fac0 	bl	80011c8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0d7      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c56:	4b0e      	ldr	r3, [pc, #56]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 80cd 	bne.w	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c6a:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a08      	ldr	r2, [pc, #32]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c76:	f7fd faa7 	bl	80011c8 <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c7e:	f7fd faa3 	bl	80011c8 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	@ 0x64
 8003c8a:	d903      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0ba      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c94:	4b5e      	ldr	r3, [pc, #376]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca0:	d0ed      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02e      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d12a      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cca:	4b51      	ldr	r3, [pc, #324]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	0f1b      	lsrs	r3, r3, #28
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	019a      	lsls	r2, r3, #6
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	071b      	lsls	r3, r3, #28
 8003cfe:	4944      	ldr	r1, [pc, #272]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d06:	4b42      	ldr	r3, [pc, #264]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	493d      	ldr	r1, [pc, #244]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d022      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d34:	d11d      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d36:	4b36      	ldr	r3, [pc, #216]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	0e1b      	lsrs	r3, r3, #24
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d44:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	0f1b      	lsrs	r3, r3, #28
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	019a      	lsls	r2, r3, #6
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	4929      	ldr	r1, [pc, #164]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	0e1b      	lsrs	r3, r3, #24
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d8c:	4b20      	ldr	r3, [pc, #128]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	019a      	lsls	r2, r3, #6
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	431a      	orrs	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	071b      	lsls	r3, r3, #28
 8003db2:	4917      	ldr	r1, [pc, #92]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	4911      	ldr	r1, [pc, #68]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fd f9f4 	bl	80011c8 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003de4:	f7fd f9f0 	bl	80011c8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e007      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e02:	d1ef      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e040      	b.n	8003ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd f826 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	@ 0x24
 8003e40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fb16 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8af 	bl	8003fc4 <UART_SetConfig>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e01b      	b.n	8003ea8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb95 	bl	80045d0 <UART_CheckIdleState>
 8003ea6:	4603      	mov	r3, r0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d177      	bne.n	8003fb8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Transmit+0x24>
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e070      	b.n	8003fba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2221      	movs	r2, #33	@ 0x21
 8003ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee6:	f7fd f96f 	bl	80011c8 <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f04:	d108      	bne.n	8003f18 <HAL_UART_Transmit+0x68>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e003      	b.n	8003f20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f20:	e02f      	b.n	8003f82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	@ 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fba6 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e03b      	b.n	8003fba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e007      	b.n	8003f70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1c9      	bne.n	8003f22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	@ 0x40
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fb70 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e005      	b.n	8003fba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4ba6      	ldr	r3, [pc, #664]	@ (8004288 <UART_SetConfig+0x2c4>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a94      	ldr	r2, [pc, #592]	@ (800428c <UART_SetConfig+0x2c8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d120      	bne.n	8004082 <UART_SetConfig+0xbe>
 8004040:	4b93      	ldr	r3, [pc, #588]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b03      	cmp	r3, #3
 800404c:	d816      	bhi.n	800407c <UART_SetConfig+0xb8>
 800404e:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <UART_SetConfig+0x90>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	08004071 	.word	0x08004071
 800405c:	0800406b 	.word	0x0800406b
 8004060:	08004077 	.word	0x08004077
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e150      	b.n	800430c <UART_SetConfig+0x348>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e14d      	b.n	800430c <UART_SetConfig+0x348>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e14a      	b.n	800430c <UART_SetConfig+0x348>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e147      	b.n	800430c <UART_SetConfig+0x348>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e144      	b.n	800430c <UART_SetConfig+0x348>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a83      	ldr	r2, [pc, #524]	@ (8004294 <UART_SetConfig+0x2d0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d132      	bne.n	80040f2 <UART_SetConfig+0x12e>
 800408c:	4b80      	ldr	r3, [pc, #512]	@ (8004290 <UART_SetConfig+0x2cc>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d828      	bhi.n	80040ec <UART_SetConfig+0x128>
 800409a:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <UART_SetConfig+0xdc>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040db 	.word	0x080040db
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040e7 	.word	0x080040e7
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e118      	b.n	800430c <UART_SetConfig+0x348>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e115      	b.n	800430c <UART_SetConfig+0x348>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e112      	b.n	800430c <UART_SetConfig+0x348>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e10f      	b.n	800430c <UART_SetConfig+0x348>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e10c      	b.n	800430c <UART_SetConfig+0x348>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a68      	ldr	r2, [pc, #416]	@ (8004298 <UART_SetConfig+0x2d4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d120      	bne.n	800413e <UART_SetConfig+0x17a>
 80040fc:	4b64      	ldr	r3, [pc, #400]	@ (8004290 <UART_SetConfig+0x2cc>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004106:	2b30      	cmp	r3, #48	@ 0x30
 8004108:	d013      	beq.n	8004132 <UART_SetConfig+0x16e>
 800410a:	2b30      	cmp	r3, #48	@ 0x30
 800410c:	d814      	bhi.n	8004138 <UART_SetConfig+0x174>
 800410e:	2b20      	cmp	r3, #32
 8004110:	d009      	beq.n	8004126 <UART_SetConfig+0x162>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d810      	bhi.n	8004138 <UART_SetConfig+0x174>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <UART_SetConfig+0x15c>
 800411a:	2b10      	cmp	r3, #16
 800411c:	d006      	beq.n	800412c <UART_SetConfig+0x168>
 800411e:	e00b      	b.n	8004138 <UART_SetConfig+0x174>
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e0f2      	b.n	800430c <UART_SetConfig+0x348>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0ef      	b.n	800430c <UART_SetConfig+0x348>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0ec      	b.n	800430c <UART_SetConfig+0x348>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0e9      	b.n	800430c <UART_SetConfig+0x348>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0e6      	b.n	800430c <UART_SetConfig+0x348>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a56      	ldr	r2, [pc, #344]	@ (800429c <UART_SetConfig+0x2d8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d120      	bne.n	800418a <UART_SetConfig+0x1c6>
 8004148:	4b51      	ldr	r3, [pc, #324]	@ (8004290 <UART_SetConfig+0x2cc>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004152:	2bc0      	cmp	r3, #192	@ 0xc0
 8004154:	d013      	beq.n	800417e <UART_SetConfig+0x1ba>
 8004156:	2bc0      	cmp	r3, #192	@ 0xc0
 8004158:	d814      	bhi.n	8004184 <UART_SetConfig+0x1c0>
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d009      	beq.n	8004172 <UART_SetConfig+0x1ae>
 800415e:	2b80      	cmp	r3, #128	@ 0x80
 8004160:	d810      	bhi.n	8004184 <UART_SetConfig+0x1c0>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <UART_SetConfig+0x1a8>
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x1b4>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x1c0>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e0cc      	b.n	800430c <UART_SetConfig+0x348>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e0c9      	b.n	800430c <UART_SetConfig+0x348>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0c6      	b.n	800430c <UART_SetConfig+0x348>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0c3      	b.n	800430c <UART_SetConfig+0x348>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0c0      	b.n	800430c <UART_SetConfig+0x348>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a44      	ldr	r2, [pc, #272]	@ (80042a0 <UART_SetConfig+0x2dc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d125      	bne.n	80041e0 <UART_SetConfig+0x21c>
 8004194:	4b3e      	ldr	r3, [pc, #248]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a2:	d017      	beq.n	80041d4 <UART_SetConfig+0x210>
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a8:	d817      	bhi.n	80041da <UART_SetConfig+0x216>
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ae:	d00b      	beq.n	80041c8 <UART_SetConfig+0x204>
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b4:	d811      	bhi.n	80041da <UART_SetConfig+0x216>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <UART_SetConfig+0x1fe>
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d006      	beq.n	80041ce <UART_SetConfig+0x20a>
 80041c0:	e00b      	b.n	80041da <UART_SetConfig+0x216>
 80041c2:	2300      	movs	r3, #0
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0a1      	b.n	800430c <UART_SetConfig+0x348>
 80041c8:	2302      	movs	r3, #2
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e09e      	b.n	800430c <UART_SetConfig+0x348>
 80041ce:	2304      	movs	r3, #4
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e09b      	b.n	800430c <UART_SetConfig+0x348>
 80041d4:	2308      	movs	r3, #8
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e098      	b.n	800430c <UART_SetConfig+0x348>
 80041da:	2310      	movs	r3, #16
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e095      	b.n	800430c <UART_SetConfig+0x348>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <UART_SetConfig+0x2e0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d125      	bne.n	8004236 <UART_SetConfig+0x272>
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <UART_SetConfig+0x2cc>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f8:	d017      	beq.n	800422a <UART_SetConfig+0x266>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x26c>
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004204:	d00b      	beq.n	800421e <UART_SetConfig+0x25a>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d811      	bhi.n	8004230 <UART_SetConfig+0x26c>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x254>
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x260>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x26c>
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e076      	b.n	800430c <UART_SetConfig+0x348>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e073      	b.n	800430c <UART_SetConfig+0x348>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e070      	b.n	800430c <UART_SetConfig+0x348>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e06d      	b.n	800430c <UART_SetConfig+0x348>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e06a      	b.n	800430c <UART_SetConfig+0x348>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <UART_SetConfig+0x2e4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d138      	bne.n	80042b2 <UART_SetConfig+0x2ee>
 8004240:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800424a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800424e:	d017      	beq.n	8004280 <UART_SetConfig+0x2bc>
 8004250:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004254:	d82a      	bhi.n	80042ac <UART_SetConfig+0x2e8>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800425a:	d00b      	beq.n	8004274 <UART_SetConfig+0x2b0>
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004260:	d824      	bhi.n	80042ac <UART_SetConfig+0x2e8>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <UART_SetConfig+0x2aa>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426a:	d006      	beq.n	800427a <UART_SetConfig+0x2b6>
 800426c:	e01e      	b.n	80042ac <UART_SetConfig+0x2e8>
 800426e:	2300      	movs	r3, #0
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e04b      	b.n	800430c <UART_SetConfig+0x348>
 8004274:	2302      	movs	r3, #2
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e048      	b.n	800430c <UART_SetConfig+0x348>
 800427a:	2304      	movs	r3, #4
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e045      	b.n	800430c <UART_SetConfig+0x348>
 8004280:	2308      	movs	r3, #8
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e042      	b.n	800430c <UART_SetConfig+0x348>
 8004286:	bf00      	nop
 8004288:	efff69f3 	.word	0xefff69f3
 800428c:	40011000 	.word	0x40011000
 8004290:	40023800 	.word	0x40023800
 8004294:	40004400 	.word	0x40004400
 8004298:	40004800 	.word	0x40004800
 800429c:	40004c00 	.word	0x40004c00
 80042a0:	40005000 	.word	0x40005000
 80042a4:	40011400 	.word	0x40011400
 80042a8:	40007800 	.word	0x40007800
 80042ac:	2310      	movs	r3, #16
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e02c      	b.n	800430c <UART_SetConfig+0x348>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a72      	ldr	r2, [pc, #456]	@ (8004480 <UART_SetConfig+0x4bc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d125      	bne.n	8004308 <UART_SetConfig+0x344>
 80042bc:	4b71      	ldr	r3, [pc, #452]	@ (8004484 <UART_SetConfig+0x4c0>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042ca:	d017      	beq.n	80042fc <UART_SetConfig+0x338>
 80042cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042d0:	d817      	bhi.n	8004302 <UART_SetConfig+0x33e>
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d6:	d00b      	beq.n	80042f0 <UART_SetConfig+0x32c>
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042dc:	d811      	bhi.n	8004302 <UART_SetConfig+0x33e>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <UART_SetConfig+0x326>
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e6:	d006      	beq.n	80042f6 <UART_SetConfig+0x332>
 80042e8:	e00b      	b.n	8004302 <UART_SetConfig+0x33e>
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e00d      	b.n	800430c <UART_SetConfig+0x348>
 80042f0:	2302      	movs	r3, #2
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e00a      	b.n	800430c <UART_SetConfig+0x348>
 80042f6:	2304      	movs	r3, #4
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e007      	b.n	800430c <UART_SetConfig+0x348>
 80042fc:	2308      	movs	r3, #8
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e004      	b.n	800430c <UART_SetConfig+0x348>
 8004302:	2310      	movs	r3, #16
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e001      	b.n	800430c <UART_SetConfig+0x348>
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004314:	d15b      	bne.n	80043ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d828      	bhi.n	800436e <UART_SetConfig+0x3aa>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x360>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004349 	.word	0x08004349
 8004328:	08004351 	.word	0x08004351
 800432c:	08004359 	.word	0x08004359
 8004330:	0800436f 	.word	0x0800436f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800436f 	.word	0x0800436f
 800433c:	0800436f 	.word	0x0800436f
 8004340:	0800436f 	.word	0x0800436f
 8004344:	08004367 	.word	0x08004367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7ff f94c 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 800434c:	61b8      	str	r0, [r7, #24]
        break;
 800434e:	e013      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7ff f95c 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8004354:	61b8      	str	r0, [r7, #24]
        break;
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004358:	4b4b      	ldr	r3, [pc, #300]	@ (8004488 <UART_SetConfig+0x4c4>)
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e00c      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7ff f82f 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8004362:	61b8      	str	r0, [r7, #24]
        break;
 8004364:	e008      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800436a:	61bb      	str	r3, [r7, #24]
        break;
 800436c:	e004      	b.n	8004378 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	77bb      	strb	r3, [r7, #30]
        break;
 8004376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d074      	beq.n	8004468 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	005a      	lsls	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d916      	bls.n	80043c8 <UART_SetConfig+0x404>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d212      	bcs.n	80043c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f023 030f 	bic.w	r3, r3, #15
 80043aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	89fa      	ldrh	r2, [r7, #14]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	e04f      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	77bb      	strb	r3, [r7, #30]
 80043cc:	e04c      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d828      	bhi.n	8004426 <UART_SetConfig+0x462>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <UART_SetConfig+0x418>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004409 	.word	0x08004409
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004427 	.word	0x08004427
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004427 	.word	0x08004427
 80043f8:	08004427 	.word	0x08004427
 80043fc:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7ff f8f0 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8004404:	61b8      	str	r0, [r7, #24]
        break;
 8004406:	e013      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7ff f900 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 800440c:	61b8      	str	r0, [r7, #24]
        break;
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <UART_SetConfig+0x4c4>)
 8004412:	61bb      	str	r3, [r7, #24]
        break;
 8004414:	e00c      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe ffd3 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800441a:	61b8      	str	r0, [r7, #24]
        break;
 800441c:	e008      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004422:	61bb      	str	r3, [r7, #24]
        break;
 8004424:	e004      	b.n	8004430 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	77bb      	strb	r3, [r7, #30]
        break;
 800442e:	bf00      	nop
    }

    if (pclk != 0U)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	085a      	lsrs	r2, r3, #1
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	441a      	add	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d909      	bls.n	8004464 <UART_SetConfig+0x4a0>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004456:	d205      	bcs.n	8004464 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e001      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004474:	7fbb      	ldrb	r3, [r7, #30]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40007c00 	.word	0x40007c00
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400

0800448c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458a:	d10a      	bne.n	80045a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e0:	f7fc fdf2 	bl	80011c8 <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d12e      	bne.n	8004652 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f83b 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d021      	beq.n	8004652 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	60fb      	str	r3, [r7, #12]
   return(result);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	617b      	str	r3, [r7, #20]
   return(result);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e011      	b.n	8004676 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3728      	adds	r7, #40	@ 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468e:	e04f      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d04b      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	f7fc fd96 	bl	80011c8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <UART_WaitOnFlagUntilTimeout+0x30>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e04e      	b.n	8004750 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d037      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b80      	cmp	r3, #128	@ 0x80
 80046c4:	d034      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d031      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d110      	bne.n	80046fc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2208      	movs	r2, #8
 80046e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f838 	bl	8004758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2208      	movs	r2, #8
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e029      	b.n	8004750 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800470a:	d111      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004714:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f81e 	bl	8004758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e00f      	b.n	8004750 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	429a      	cmp	r2, r3
 800474c:	d0a0      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b095      	sub	sp, #84	@ 0x54
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004774:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004780:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e6      	bne.n	8004760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3308      	adds	r3, #8
 80047b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e5      	bne.n	8004792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d118      	bne.n	8004800 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	60bb      	str	r3, [r7, #8]
   return(result);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0310 	bic.w	r3, r3, #16
 80047e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	613b      	str	r3, [r7, #16]
   return(result);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e6      	bne.n	80047ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004814:	bf00      	nop
 8004816:	3754      	adds	r7, #84	@ 0x54
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004820:	b084      	sub	sp, #16
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	f107 001c 	add.w	r0, r7, #28
 800482e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004832:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004836:	2b01      	cmp	r3, #1
 8004838:	d121      	bne.n	800487e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <USB_CoreInit+0xb0>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800485e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa92 	bl	8004d9c <USB_CoreReset>
 8004878:	4603      	mov	r3, r0
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	e010      	b.n	80048a0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa86 	bl	8004d9c <USB_CoreReset>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80048a0:	7fbb      	ldrb	r3, [r7, #30]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10b      	bne.n	80048be <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f043 0206 	orr.w	r2, r3, #6
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ca:	b004      	add	sp, #16
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	ffbdffbf 	.word	0xffbdffbf

080048d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 0201 	bic.w	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d115      	bne.n	8004944 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004924:	200a      	movs	r0, #10
 8004926:	f7fc fc5b 	bl	80011e0 <HAL_Delay>
      ms += 10U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	330a      	adds	r3, #10
 800492e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa25 	bl	8004d80 <USB_GetMode>
 8004936:	4603      	mov	r3, r0
 8004938:	2b01      	cmp	r3, #1
 800493a:	d01e      	beq.n	800497a <USB_SetCurrentMode+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004940:	d9f0      	bls.n	8004924 <USB_SetCurrentMode+0x2e>
 8004942:	e01a      	b.n	800497a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d115      	bne.n	8004976 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004956:	200a      	movs	r0, #10
 8004958:	f7fc fc42 	bl	80011e0 <HAL_Delay>
      ms += 10U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	330a      	adds	r3, #10
 8004960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa0c 	bl	8004d80 <USB_GetMode>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <USB_SetCurrentMode+0x84>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2bc7      	cmp	r3, #199	@ 0xc7
 8004972:	d9f0      	bls.n	8004956 <USB_SetCurrentMode+0x60>
 8004974:	e001      	b.n	800497a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e005      	b.n	8004986 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2bc8      	cmp	r3, #200	@ 0xc8
 800497e:	d101      	bne.n	8004984 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004990:	b084      	sub	sp, #16
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800499e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e009      	b.n	80049c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3340      	adds	r3, #64	@ 0x40
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3301      	adds	r3, #1
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0e      	cmp	r3, #14
 80049c8:	d9f2      	bls.n	80049b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11c      	bne.n	8004a0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e005      	b.n	8004a18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10d      	bne.n	8004a48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a34:	2100      	movs	r1, #0
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f968 	bl	8004d0c <USB_SetDevSpeed>
 8004a3c:	e008      	b.n	8004a50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a3e:	2101      	movs	r1, #1
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f963 	bl	8004d0c <USB_SetDevSpeed>
 8004a46:	e003      	b.n	8004a50 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a48:	2103      	movs	r1, #3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f95e 	bl	8004d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a50:	2110      	movs	r1, #16
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8fa 	bl	8004c4c <USB_FlushTxFifo>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f924 	bl	8004cb0 <USB_FlushRxFifo>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e043      	b.n	8004b24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ab2:	d118      	bne.n	8004ae6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e013      	b.n	8004af8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e008      	b.n	8004af8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af2:	461a      	mov	r2, r3
 8004af4:	2300      	movs	r3, #0
 8004af6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b16:	461a      	mov	r2, r3
 8004b18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3301      	adds	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b28:	461a      	mov	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d3b5      	bcc.n	8004a9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e043      	b.n	8004bbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b4c:	d118      	bne.n	8004b80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e013      	b.n	8004b92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b76:	461a      	mov	r2, r3
 8004b78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e008      	b.n	8004b92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d3b5      	bcc.n	8004b36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <USB_DevInit+0x2b4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f043 0208 	orr.w	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <USB_DevInit+0x2b8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	803c3800 	.word	0x803c3800
 8004c48:	40000004 	.word	0x40000004

08004c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c66:	d901      	bls.n	8004c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e01b      	b.n	8004ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	daf2      	bge.n	8004c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	019b      	lsls	r3, r3, #6
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c90:	d901      	bls.n	8004c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e006      	b.n	8004ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d0f0      	beq.n	8004c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc8:	d901      	bls.n	8004cce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e018      	b.n	8004d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	daf2      	bge.n	8004cbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cec:	d901      	bls.n	8004cf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e006      	b.n	8004d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d0f0      	beq.n	8004ce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d58:	f023 0303 	bic.w	r3, r3, #3
 8004d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3301      	adds	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db4:	d901      	bls.n	8004dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e01b      	b.n	8004df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	daf2      	bge.n	8004da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dde:	d901      	bls.n	8004de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e006      	b.n	8004df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d0f0      	beq.n	8004dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <memset>:
 8004dfe:	4402      	add	r2, r0
 8004e00:	4603      	mov	r3, r0
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d100      	bne.n	8004e08 <memset+0xa>
 8004e06:	4770      	bx	lr
 8004e08:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0c:	e7f9      	b.n	8004e02 <memset+0x4>
	...

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4d0d      	ldr	r5, [pc, #52]	@ (8004e48 <__libc_init_array+0x38>)
 8004e14:	4c0d      	ldr	r4, [pc, #52]	@ (8004e4c <__libc_init_array+0x3c>)
 8004e16:	1b64      	subs	r4, r4, r5
 8004e18:	10a4      	asrs	r4, r4, #2
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	4d0b      	ldr	r5, [pc, #44]	@ (8004e50 <__libc_init_array+0x40>)
 8004e22:	4c0c      	ldr	r4, [pc, #48]	@ (8004e54 <__libc_init_array+0x44>)
 8004e24:	f000 f818 	bl	8004e58 <_init>
 8004e28:	1b64      	subs	r4, r4, r5
 8004e2a:	10a4      	asrs	r4, r4, #2
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	08004ea4 	.word	0x08004ea4
 8004e4c:	08004ea4 	.word	0x08004ea4
 8004e50:	08004ea4 	.word	0x08004ea4
 8004e54:	08004ea8 	.word	0x08004ea8

08004e58 <_init>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr

08004e64 <_fini>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr
